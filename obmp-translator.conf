# enable/disable debug msgs
debug: true
# run program in the background or not
daemon: false


# translator uses the following kafka configs to retrieve raw bmp msgs produced by obmpv2.
librdkafka_consumer_config:
  # obmpv2 brokers that you wish to listen to
  obmpv2_brokers: "localhost:9092"
  # raw bmp topics that you want to subscribe
  raw_topics: "bmp_raw,bmp_raw_1,bmp_raw_2"


# translator uses the following kafka configs to produce parsed msgs that is identical to obmpv1 parsed msgs.
librdkafka_producer_config:

  ##################################################
  ### The following variables and values will be ###
  ###   directly passed to librdkafka            ###
  ### Consult with librdkafka documentation to   ###
  ###   configure your producer                  ###
  ##################################################

  # BROKER LIST
  #   For IPv6 use "[host or ip]:port".  Make sure to use double quotes for IPv6
  #   Can specify the protocol using <proto>://<host>[:port]
  #   Use comma to separate brokers (no space)
  #   e.g., metadata.broker.list: "localhost:9092,localhost:12345"
  metadata.broker.list: "localhost:9092"

  # message.max.bytes - Maximum transmit message size
  message.max.bytes: 1000000

  # receive.message.max.bytes - Maximum receive message size
  # The value should be at least
  # fetch.message.max.bytes * number of partitions consumed from i
  # + messaging overhead (e.g. 200000 bytes).
  receive.message.max.bytes: 200000000

  # Client group session and failure detection timeout in milliseconds
  session.timeout.ms: 10000

  # Timeout for network requests
  socket.timeout.ms: 30000

  # Maximum number of messages allowed on the producer queue.
  queue.buffering.max.messages: 100000

  # Maximum number of kbytes allowed on the producer queue. Range 1 - 2097151
  queue.buffering.max.kbytes: 1048576

  # Maximum time, in milliseconds, for buffering data on the producer queue.
  queue.buffering.max.ms: 100

  # How many times to retry sending a failing MessageSet.
  # Note: retrying may cause reordering.
  message.send.max.retries: 2

  # The backoff time in milliseconds before retrying a message send.
  retry.backoff.ms: 100

  # Compression codec to use for compressing message sets: none, gzip or snappy
  # By default it is set to snappy
  compression.codec: snappy

  api.version.request: true
  log.connection.close: false
